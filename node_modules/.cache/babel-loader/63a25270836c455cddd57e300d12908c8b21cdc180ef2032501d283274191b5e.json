{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\crispWeb-main\\\\src\\\\views\\\\dropdown.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dropdownx = ({\n  yearY,\n  monthY,\n  dayY,\n  timeY\n}) => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [dateOptions, setDateOptions] = useState([]);\n  useEffect(() => {\n    const currentDate = new Date();\n    const nextThreeDays = new Array(7).fill(null).map((_, index) => {\n      const date = new Date(currentDate);\n      date.setDate(currentDate.getDate() + index);\n      return date;\n    });\n    setDateOptions(nextThreeDays);\n  }, []);\n  const handleDateChange = event => {\n    const value = event.target.value;\n    const yearx = value.substring(0, 4);\n    const monthx = value.substring(5, 7);\n    const dayx = value.substring(8, 10);\n    const timex = value.substring(25, 30);\n\n    // Update state variables based on the selected date and time slot\n    setSelectedDate(`${yearx}/${monthx}/${dayx}`);\n    setSelectedTimeSlot(timex);\n    console.log(yearx);\n    console.log(monthx);\n    console.log(dayx);\n    console.log(timex);\n    console.log(value);\n  };\n  const handleTimeSlotChange = event => {\n    setSelectedTimeSlot(event.target.value);\n  };\n  const currentHour = new Date().getHours();\n  const availableTimeSlots = [{\n    label: '8:00 AM - 12:00 PM',\n    value: '8-12'\n  }, {\n    label: '12:00 PM - 2:00 PM',\n    value: '12-2'\n  }, {\n    label: '2:00 PM - 4:00 PM',\n    value: '02-04'\n  }, {\n    label: '4:00 PM - 6:00 PM',\n    value: '04-06'\n  }, {\n    label: '6:00 PM - 8:00 PM',\n    value: '06-08'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"date\",\n      onChange: handleDateChange,\n      value: `${selectedDate}-${selectedTimeSlot}`,\n      className: \"home-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        disabled: true,\n        children: \"Select a date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), dateOptions.map(date => /*#__PURE__*/_jsxDEV(\"optgroup\", {\n        label: date.toDateString(),\n        style: {\n          borderBottom: '1px solid black'\n        },\n        children: availableTimeSlots.map(slot => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: `${date.toISOString()}-${slot.value}`,\n          children: slot.label\n        }, `${date.toISOString()}-${slot.value}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this))\n      }, date.toISOString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Dropdownx, \"ZASrDfuIeqrFQ/L64lpF3jFQAb8=\");\n_c = Dropdownx;\nexport default Dropdownx;\nvar _c;\n$RefreshReg$(_c, \"Dropdownx\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Dropdownx","yearY","monthY","dayY","timeY","_s","selectedDate","setSelectedDate","selectedTimeSlot","setSelectedTimeSlot","dateOptions","setDateOptions","currentDate","Date","nextThreeDays","Array","fill","map","_","index","date","setDate","getDate","handleDateChange","event","value","target","yearx","substring","monthx","dayx","timex","console","log","handleTimeSlotChange","currentHour","getHours","availableTimeSlots","label","style","width","children","id","onChange","className","disabled","fileName","_jsxFileName","lineNumber","columnNumber","toDateString","borderBottom","slot","toISOString","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/crispWeb-main/src/views/dropdown.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './home.css';\n\nconst Dropdownx = ({yearY, monthY, dayY, timeY}) => {\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [dateOptions, setDateOptions] = useState([]);\n\n  useEffect(() => {\n    const currentDate = new Date();\n    const nextThreeDays = new Array(7).fill(null).map((_, index) => {\n      const date = new Date(currentDate);\n      date.setDate(currentDate.getDate() + index);\n      return date;\n    });\n\n    setDateOptions(nextThreeDays);\n  }, []);\n\n  const handleDateChange = (event) => {\n    const value = event.target.value;\n\n    const yearx = value.substring(0, 4);\n    const monthx = value.substring(5, 7);\n    const dayx = value.substring(8, 10);\n    const timex = value.substring(25, 30);\n\n    // Update state variables based on the selected date and time slot\n    setSelectedDate(`${yearx}/${monthx}/${dayx}`);\n    setSelectedTimeSlot(timex);\n\n    console.log(yearx);\n    console.log(monthx);\n    console.log(dayx);\n    console.log(timex);\n    console.log(value);\n};\n\n\n  \n  \n\n  const handleTimeSlotChange = (event) => {\n    setSelectedTimeSlot(event.target.value);\n  };\n\n  const currentHour = new Date().getHours();\n  const availableTimeSlots = [\n    { label: '8:00 AM - 12:00 PM', value: '8-12' },\n    { label: '12:00 PM - 2:00 PM', value: '12-2' },\n    { label: '2:00 PM - 4:00 PM', value: '02-04' },\n    { label: '4:00 PM - 6:00 PM', value: '04-06' },\n    { label: '6:00 PM - 8:00 PM', value: '06-08' },\n  ];\n\n  return (\n    <div style={{ width: '100%' }}>\n      <select\n        id=\"date\"\n        onChange={handleDateChange}\n        value={`${selectedDate}-${selectedTimeSlot}`}\n        className='home-select'\n      >\n        <option value=\"\" disabled>\n          Select a date\n        </option>\n        {dateOptions.map((date) => (\n          <optgroup key={date.toISOString()} label={date.toDateString()} style={{ borderBottom: '1px solid black' }}>\n            {availableTimeSlots.map((slot) => (\n              <option key={`${date.toISOString()}-${slot.value}`} value={`${date.toISOString()}-${slot.value}`}>\n                {slot.label}\n              </option>\n            ))}\n          </optgroup>\n        ))}\n      </select>\n\n      {/* <p>\n        Selected Date: {selectedDate}\n        <br />\n        Selected Time Slot: {selectedTimeSlot || 'N/A'}\n      </p> */}\n    </div>\n  );\n};\n\nexport default Dropdownx;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}